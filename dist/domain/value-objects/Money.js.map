{"version":3,"file":"Money.js","sourceRoot":"","sources":["../../../src/domain/value-objects/Money.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,OAAO,OAAO,KAAK;IAChB,MAAM,CAAS;IACf,QAAQ,CAAW;IAE3B,YAAY,MAAc,EAAE,WAAqB,KAAK;QACpD,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9D,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC1D,CAAC;QACD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,QAAQ;QACJ,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI;YACzC,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG;gBAC/B,CAAC,CAAC,GAAG,CAAC;QACV,OAAO,GAAG,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;IACnE,CAAC;IAED,GAAG,CAAC,KAAY;QACd,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,EAAE,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACrD,CAAC;QACD,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;YACrC,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACrD,CAAC;QACD,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9D,CAAC;IAED,QAAQ,CAAC,MAAc;QACrB,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;YAChD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;QACD,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxD,CAAC;IAED,QAAQ,CAAC,KAAY;QACnB,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,EAAE,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC1D,CAAC;QACD,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;YACrC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC1D,CAAC;QACD,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9D,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;CACF","sourcesContent":["type Currency = 'BRL' | 'USD' | 'EUR';\r\n\r\nexport default class Money {\r\n  private amount: number;\r\n  private currency: Currency;\r\n\r\n  constructor(amount: number, currency: Currency = 'BRL') {\r\n    if (typeof amount !== 'number' || isNaN(amount) || amount < 0) {\r\n      throw new Error('Amount must be a non-negative number');\r\n    }\r\n    this.amount = amount;\r\n    this.currency = currency;\r\n  }\r\n\r\n  toString(): string {\r\n      const symbol = this.currency === 'BRL' ? 'R$'\r\n          : this.currency === 'USD' ? '$'\r\n          : 'â‚¬';\r\n      return `${symbol} ${this.amount.toFixed(2).replace('.', ',')}`;\r\n  }\r\n\r\n  add(other: Money): Money {\r\n    if (!other || !(other instanceof Money)) {\r\n      throw new Error('Cannot add different currencies');\r\n    }\r\n    if (other.currency !== this.currency) {\r\n      throw new Error('Cannot add different currencies');\r\n    }\r\n    return new Money(this.amount + other.amount, this.currency);\r\n  }\r\n\r\n  multiply(factor: number): Money {\r\n    if (typeof factor !== 'number' || isNaN(factor)) {\r\n      throw new Error('Factor must be a number');\r\n    }\r\n    return new Money(this.amount * factor, this.currency);\r\n  }\r\n\r\n  subtract(other: Money): Money {\r\n    if (!other || !(other instanceof Money)) {\r\n      throw new Error('Cannot subtract different currencies');\r\n    }\r\n    if (other.currency !== this.currency) {\r\n      throw new Error('Cannot subtract different currencies');\r\n    }\r\n    return new Money(this.amount - other.amount, this.currency);\r\n  }\r\n\r\n  getAmount(): number {\r\n    return this.amount;\r\n  }\r\n\r\n  getCurrency(): Currency {\r\n    return this.currency;\r\n  }\r\n}"]}