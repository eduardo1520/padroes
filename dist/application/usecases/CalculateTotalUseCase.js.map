{"version":3,"file":"CalculateTotalUseCase.js","sourceRoot":"","sources":["../../../src/application/usecases/CalculateTotalUseCase.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,uCAAuC,CAAC;AAOjE,MAAM,CAAC,OAAO,OAAO,qBAAqB;IAChC,cAAc,CAAiB;IAC/B,eAAe,CAAkB;IAEzC,YAAY,cAA8B,EAAE,eAAgC;QAC1E,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,MAAc,EACd,IAAiE;QAEjE,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACtD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,IAAI,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnB,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,MAAc,EAAE,eAAuB,MAAM;QAChE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;QAED,MAAM,QAAQ,GAAqB,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAClF,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;CACF","sourcesContent":["import ShoppingCart from '../../domain/entities/ShoppingCart.js';\r\nimport Money from '../../domain/value-objects/Money.js';\r\nimport type { CartRepository } from '../../domain/ports/outbound/CartRepository.js';\r\nimport DiscountService from '../../domain/services/DiscountService.js';\r\nimport type { DiscountStrategy } from '../../domain/ports/outbound/DiscountStrategy.js';\r\nimport type { CartUseCase } from '../../domain/ports/inbound/CartUseCase.js';\r\n\r\nexport default class CalculateTotalUseCase implements CartUseCase {\r\n  private cartRepository: CartRepository;\r\n  private discountService: DiscountService;\r\n\r\n  constructor(cartRepository: CartRepository, discountService: DiscountService) {\r\n    this.cartRepository = cartRepository;\r\n    this.discountService = discountService;\r\n  }\r\n\r\n  async addItemToCart(\r\n    cartId: string,\r\n    item: { name?: string; price: number | Money; quantity?: number }\r\n  ): Promise<ShoppingCart> {\r\n    let cart = await this.cartRepository.findById(cartId);\r\n    if (!cart) {\r\n      cart = new ShoppingCart(cartId);\r\n    }\r\n\r\n    cart.addItem(item);\r\n    await this.cartRepository.save(cart);\r\n    return cart;\r\n  }\r\n\r\n  async calculateTotal(cartId: string, discountType: string = 'NONE'): Promise<number> {\r\n    const cart = await this.cartRepository.findById(cartId);\r\n    if (!cart) {\r\n      throw new Error('Cart not found');\r\n    }\r\n\r\n    const strategy: DiscountStrategy = this.discountService.getStrategy(discountType);\r\n    return cart.calculateTotal(strategy);\r\n  }\r\n}"]}