{"version":3,"file":"CartItem.js","sourceRoot":"","sources":["../../../src/domain/value-objects/CartItem.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,YAAY,CAAC;AAE/B,MAAM,CAAC,OAAO,OAAO,QAAQ;IAC3B,IAAI,CAAS;IACb,KAAK,CAAQ;IACb,QAAQ,CAAS;IACjB,KAAK,CAAQ;IAEb,YAAY,IAAY,EAAE,KAAqB,EAAE,WAAmB,CAAC;QACnE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC;IAEO,sBAAsB,CAAC,IAAY;QACzC,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,EAAE,EAAE,CAAC;YACvD,OAAO,MAAM,CAAC;QAChB,CAAC;QACD,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC;IACvC,CAAC;IAEO,uBAAuB,CAAC,KAAqB;QACnD,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;YAC3B,OAAO,KAAK,CAAC;QACf,CAAC;QACD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC;YAC5C,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;IACzE,CAAC;IAEO,gBAAgB,CAAC,QAAgB;QACvC,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,GAAG,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;YACpE,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC5D,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF","sourcesContent":["import Money from './Money.js';\r\n\r\nexport default class CartItem {\r\n  name: string;\r\n  price: Money;\r\n  quantity: number;\r\n  total: Money;\r\n\r\n  constructor(name: string, price: number | Money, quantity: number = 1) {\r\n    this.name = this.validateAndConvertName(name);\r\n    this.price = this.validateAndConvertPrice(price);\r\n    this.quantity = this.validateQuantity(quantity);\r\n    this.total = this.price.multiply(this.quantity);\r\n  }\r\n\r\n  private validateAndConvertName(name: string): string {\r\n    if (name === null || name === undefined || name === '') {\r\n      return 'Item';\r\n    }\r\n    return String(name).trim() || 'Item';\r\n  }\r\n\r\n  private validateAndConvertPrice(price: number | Money): Money {\r\n    if (price instanceof Money) {\r\n      return price;\r\n    }\r\n    if (typeof price === 'number' && price >= 0) {\r\n      return new Money(price);\r\n    }\r\n    throw new Error('Price must be a non-negative number or Money object');\r\n  }\r\n\r\n  private validateQuantity(quantity: number): number {\r\n    if (typeof quantity !== 'number' || quantity < 0 || isNaN(quantity)) {\r\n      throw new Error('Quantity must be a non-negative number');\r\n    }\r\n    return quantity;\r\n  }\r\n}"]}